@page "/settings"
@using TrackYourDay.Core.Settings
@using TrackYourDay.Core.ApplicationTrackers.Breaks
@using TrackYourDay.Core.ApplicationTrackers.GitLab
@using TrackYourDay.Core.ApplicationTrackers.Jira
@using TrackYourDay.Core.Insights.Analytics
@inject ActivitiesAnalyser activitiesAnalyser
@inject IServiceProvider serviceProvider

<h1>Settings</h1>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Breaks">
        <MudText>
            How many minutes should pass without any Activity to Start Break?
        </MudText>
        <MudSlider @bind-Value="minutesOfNoActivityToStartBreak"  TickMarks="true" Step="1" Min="1" Max="60">
            @this.minutesOfNoActivityToStartBreak.ToString() minutes
        </MudSlider>
    </MudTabPanel>
    <MudTabPanel Text="GitLab Integration"> 
        <MudText>
            GitLab credentials are encrypted at rest using AES with your Windows Account SID as salt.
        </MudText>
        <MudTextField @bind-Value="gitLabApiUrl" Label="GitLab API URL" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="gitLabApiKey" Label="GitLab API Key" Variant="Variant.Outlined" InputType="InputType.Password" />
    </MudTabPanel>
    <MudTabPanel Text="Jira Integration">
        <MudText>
            Jira credentials are encrypted at rest using AES with your Windows Account SID as salt.
        </MudText>
        <MudTextField @bind-Value="jiraApiUrl" Label="Jira API URL" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="jiraApiKey" Label="Jira API Key" Variant="Variant.Outlined" InputType="InputType.Password" />
    </MudTabPanel>
    <MudTabPanel Text="Summary Strategy">
        <MudText>
            Select summary generation strategy:
        </MudText>
        <MudSelect T="string" @bind-Value="selectedStrategy" Label="Summary Strategy" Variant="Variant.Outlined" Style="min-width: 250px">
            @foreach (var strategy in availableStrategies)
            {
                <MudSelectItem Value="@strategy.Key">@strategy.Value</MudSelectItem>
            }
        </MudSelect>
    </MudTabPanel>
</MudTabs>

<MudDialog @bind-IsVisible="isSettingsSavedDialogVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Settings saved
        </MudText>
    </TitleContent>
    <DialogContent>
        <p>New settings will be used after restarting application..</p>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HideSettingsSavedDialog" Class="px-10">Got it!</MudButton>
    </DialogActions>
</MudDialog>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveSettings">Save</MudButton>

@code {
    [Inject]
    private IBreaksSettingsService breaksSettingsService { get; init; }
    
    [Inject]
    private IGitLabSettingsService gitLabSettingsService { get; init; }
    
    [Inject]
    private IJiraSettingsService jiraSettingsService { get; init; }

    private int minutesOfNoActivityToStartBreak = 5;
    private bool isSettingsSavedDialogVisible;
    private string gitLabApiUrl = string.Empty;
    private string gitLabApiKey = string.Empty;
    private string jiraApiUrl = string.Empty;
    private string jiraApiKey = string.Empty;

    // Summary strategy selection
    private string selectedStrategy = "SummaryGenerator";
    private Dictionary<string, string> availableStrategies = new()
    {
        { "SummaryGenerator", "ML.NET Semantic Summary" },
        { "JiraKeySummaryStrategy", "Jira Key Grouping" }
    };

    protected override void OnInitialized()
    {
        this.LoadSettings();
        selectedStrategy = "SummaryGenerator"; // Default
    }

    private void ShowSettingsSavedDialog() => isSettingsSavedDialogVisible = true;
    private void HideSettingsSavedDialog() => isSettingsSavedDialogVisible = false;

    private void LoadSettings()
    {
        var breaksSettings = this.breaksSettingsService.GetSettings();
        this.minutesOfNoActivityToStartBreak = (int)breaksSettings.TimeOfNoActivityToStartBreak.TotalMinutes;

        var gitLabSettings = this.gitLabSettingsService.GetSettings();
        this.gitLabApiUrl = gitLabSettings.ApiUrl;
        this.gitLabApiKey = gitLabSettings.ApiKey;

        var jiraSettings = this.jiraSettingsService.GetSettings();
        this.jiraApiUrl = jiraSettings.ApiUrl;
        this.jiraApiKey = jiraSettings.ApiKey;
    }

    private void SaveSettings()
    {
        this.breaksSettingsService.UpdateTimeOfNoActivityToStartBreak(TimeSpan.FromMinutes(this.minutesOfNoActivityToStartBreak));
        this.breaksSettingsService.PersistSettings();
        
        this.gitLabSettingsService.UpdateSettings(this.gitLabApiUrl, this.gitLabApiKey);
        this.gitLabSettingsService.PersistSettings();
        
        this.jiraSettingsService.UpdateSettings(this.jiraApiUrl, this.jiraApiKey);
        this.jiraSettingsService.PersistSettings();

        this.ShowSettingsSavedDialog();
    }

    private async Task OnStrategyChanged(string newStrategy)
    {
        selectedStrategy = newStrategy;
        ISummaryStrategy strategyInstance = null;
        switch (newStrategy)
        {
            case "SummaryGenerator":
                strategyInstance = serviceProvider.GetRequiredService<ISummaryStrategy>();
                break;
            case "JiraKeySummaryStrategy":
                strategyInstance = serviceProvider.GetRequiredService<JiraKeySummaryStrategy>();
                break;
        }
        if (strategyInstance != null)
        {
            activitiesAnalyser.SetSummaryStrategy(strategyInstance);
        }
        await InvokeAsync(StateHasChanged);
    }
}