@page "/"
@using MediatR
@using TrackYourDay.Core.Settings
@using TrackYourDay.Core.Activities;
@using TrackYourDay.Core.Breaks;
@using TrackYourDay.Core;
@using TrackYourDay.Core.Workdays
@using TrackYourDay.Core.Workdays.Events
@using TrackYourDay.Web.Components

<h1>
    <img src="Images/refresh-button.png" alt="Refresh" style="cursor: pointer" width="35px" height="35px" @onclick="Refresh" />
    Daily Overview
</h1>

<OperationalBar></OperationalBar>

<UserTaskComponent></UserTaskComponent>

<hr />

<MudExpansionPanels MultiExpansion="true">
    <MudExpansionPanel Text="Short overview" IsInitiallyExpanded="true">
        <div style="text-align: center; margin-bottom: 20px;">
            <h2 style="color: #3f51b5; font-family: 'Arial', sans-serif;">Estimated end of Workday at: @this.estimatedEndOfWorkDay.ToShortTimeString()</h2>
        </div>
        <MudGrid Justify="Justify.Center">
            <MudItem>
                <MudChart ChartType="ChartType.Donut" Width="180px" Height="180" InputData="@worktimeLeftDataChart" InputLabels="@worktimeLeftLabelsChart">
                    <CustomGraphics>
                        <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">
                            @workday.TimeLeftToWorkActively.Hours h @workday.TimeLeftToWorkActively.Minutes m
                        </text>
                    </CustomGraphics>
                </MudChart>
            </MudItem>
            <MudItem>
                <MudChart ChartType="ChartType.Donut" Width="180px" Height="180" InputData="@breaksLeftDataChart" InputLabels="@breaksLeftLabelsChart">
                    <CustomGraphics>
                        <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">
                            @workday.BreakTimeLeft.Hours h @workday.BreakTimeLeft.Minutes m
                        </text>
                    </CustomGraphics>
                </MudChart>
            </MudItem>
            <MudItem>
                <MudChart ChartType="ChartType.Donut" Width="180px" Height="180" InputData="@overhoursDataChart" InputLabels="@overhoursLabelsChart">
                    <CustomGraphics>
                        <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">
                            @workday.OverhoursTime.Hours h @workday.OverhoursTime.Minutes m
                        </text>
                    </CustomGraphics>
                </MudChart>
            </MudItem>
        </MudGrid>
    </MudExpansionPanel>
</MudExpansionPanels>

<MudStack Row="true">
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h5">Your todays Workday progress:</MudText>
            <MudText Typo="Typo.body2">Time Of All Activities: @workday.TimeOfAllActivities</MudText>
            <MudText Typo="Typo.body2">Time Of All Breaks: @workday.TimeOfAllBreaks</MudText>
            <MudText Typo="Typo.body2">Overall Time Left To Work: @workday.OverallTimeLeftToWork</MudText>
            <MudText Typo="Typo.body2">Time Left To Work Actively: @workday.TimeLeftToWorkActively</MudText>
            <MudText Typo="Typo.body2">Break Time Left: @workday.BreakTimeLeft</MudText>
            <MudText Typo="Typo.body2">Valid Break Time Used: @workday.ValidBreakTimeUsed</MudText>
            <MudText Typo="Typo.body2">OverhoursTime: @workday.OverhoursTime</MudText>
        </MudCardContent>
        <MudCardActions>
            @* <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton> *@
        </MudCardActions>
    </MudCard>

    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h5">Your todays Workday progress:</MudText>
            <MudText Typo="Typo.body2">Workday Duration: @workdayDefinition.WorkdayDuration</MudText>
            <MudText Typo="Typo.body2">Allowed Break Duration: @workdayDefinition.AllowedBreakDuration</MudText>
            <MudText Typo="Typo.body2">Included Break Definitions: </MudText>
                @foreach (var definition in @workdayDefinition.BreakDefinitions)
                {
                    <MudText Typo="Typo.body2">@definition.Duration - @definition.Description</MudText>
                }
        </MudCardContent>
        <MudCardActions>
            @* <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton> *@
        </MudCardActions>
    </MudCard>
</MudStack>

@code {
    [Inject]
    private ISettingsSet settingsSet { get; set; }
    [Inject]
    private ActivityTracker activityTracker { get; set; }
    [Inject]
    private BreakTracker breakTracker { get; set; }
    [Inject]
    public required IMediator Mediator { get; set; }

    private Workday workday;
    private WorkdayDefinition workdayDefinition;

    private DateTime estimatedEndOfWorkDay;

    private double[] worktimeLeftDataChart = { 0, 0 };
    private string[] worktimeLeftLabelsChart = { "Time to Work", "Worked Time" };

    private double[] overhoursDataChart = { 0, 120 };
    private string[] overhoursLabelsChart = { "Overhours done", "Max overhours" };

    private double[] breaksLeftDataChart = { 0, 0 };
    private string[] breaksLeftLabelsChart = { "Breaks left", "Breaks taken" };

    protected override void OnInitialized()
    {
        this.Refresh();
    }

    private void Refresh()
    {
        this.workdayDefinition = this.settingsSet.WorkdayDefinition;
        this.workday = Workday.CreateBasedOn(this.settingsSet.WorkdayDefinition, this.activityTracker.GetEndedActivities(), this.breakTracker.GetEndedBreaks());

        this.estimatedEndOfWorkDay = DateTime.Now + workday.OverallTimeLeftToWork;

        worktimeLeftDataChart[0] = this.workday.TimeLeftToWorkActively.TotalMinutes;
        worktimeLeftDataChart[1] = this.workday.TimeAlreadyActivelyWorkded.TotalMinutes;

        overhoursDataChart[0] = this.workday.OverhoursTime.TotalMinutes;

        breaksLeftDataChart[0] = this.workday.BreakTimeLeft.TotalMinutes;
        breaksLeftDataChart[1] = this.workday.ValidBreakTimeUsed.TotalMinutes;

        this.Mediator.Publish(new WorkdayUpdatedEvent(Guid.Empty, Workday.CreateSample()));

    }
}