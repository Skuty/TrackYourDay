@using MediatR
@using MudBlazor
@using TrackYourDay.Core.Workdays
@using TrackYourDay.Core.Workdays.Events
@using TrackYourDay.Web.Events
@implements IDisposable

<div class="d-flex align-items-center" style="width: fit-content;">
    <div>
        <MudTextField @bind-Value="WorkTime" style="margin-top: 0px; width: 80px;" T="TimeSpan" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.WorkOutline" Format="hh\:mm" ReadOnly="true" />
    </div>
    <div>
        <MudTextField @bind-Value="BreakTime" style="margin-top: 0px; width: 80px;" T="TimeSpan" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.FreeBreakfast" Format="hh\:mm" ReadOnly="true" />
    </div>
    <div>
        <MudIcon Icon="@Icons.Material.Filled.Task" />
    </div>
    <div>
        <MudIconButton style="margin-top: 0px;" Icon="@Icons.Material.Filled.PlayArrow" Size="Size.Small" />
    </div>
    <div>
        <MudIconButton style="margin-top: 0px;" Icon="@Icons.Material.Filled.Stop" Size="Size.Small" />
    </div>
    <div>
        <MudTextField @bind-Value="UserTaskTime" style="margin-top: 0px; width: 50px;" T="TimeSpan" Format="hh\:mm" ReadOnly="true" />
    </div>
    <div>
        <MudTextField @bind-Value="UserTaskDescription" style="margin-top: 0px; width: 200px;" T="string" Placeholder="User Task" />
    </div>
</div>

@code {
    [Inject]
    public required IMediator Mediator { get; set; }

    [Inject]
    public required EventWrapperForComponents EventWrapper { get; set; }

    private TimeSpan WorkTime { get; set; }
    private TimeSpan BreakTime { get; set; }
    private TimeSpan UserTaskTime { get; set; }
    private string UserTaskDescription { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        EventWrapper.OperationalBarOnWorkdayUpdatedAction += UpdateWorkdayProperties;
    }

    private void UpdateWorkdayProperties(WorkdayUpdatedEvent notification)
    {
        this.WorkTime = notification.Workday.TimeOfAllActivities;
        this.BreakTime = notification.Workday.TimeOfAllBreaks;
        this.StateHasChanged();
    }

    public void Dispose()
    {
        EventWrapper.OperationalBarOnWorkdayUpdatedAction -= UpdateWorkdayProperties;
    }
}
