@using System.Timers
@using TrackYourDay.Core.ApplicationTrackers.UserTasks
@implements IDisposable

<div>
    <MudIcon Icon="@Icons.Material.Filled.Task" style="margin-top: 0px;" />
</div>
@if (this.activeUserTask is null)
{
    <MudForm @ref="form" @bind-IsValid="@isValid" Class="d-flex align-items-center">
        <div>
            <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Size="Size.Small" OnClick="StartUserTask" Disabled="@(!this.isValid)" style="margin-top: 0px;" />
        </div>
        <div>
            <MudIconButton Icon="@Icons.Material.Filled.Stop" Size="Size.Small" Disabled="true" style="margin-top: 0px;"  />
        </div>
        <div>
            <MudTextField @bind-Value="userTaskTime" style="margin-top: -9px; width: 50px;" T="TimeSpan" Format="hh\:mm" ReadOnly="true" />
        </div>
        <div>
            <MudTextField @bind-Value="userTaskDescription" RequiredError="" Required="true" Placeholder="User Task" style="margin-top: -9px; width: 200px;" T="string" />
        </div>
    </MudForm>
} 
else
{
    <MudForm @ref="form" @bind-IsValid="@isValid" Class="d-flex align-items-center">
        <div>
            <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Size="Size.Small" OnClick="StartUserTask" Disabled="true" style="margin-top: 8px;" />
        </div>
        <div>
            <MudIconButton Icon="@Icons.Material.Filled.Stop" Size="Size.Small" OnClick="EndUserTask" style="margin-top: 8px;"  />
        </div>
        <div>
            <MudTextField @bind-Value="userTaskTime" style="margin-top: 0px; width: 50px;" T="TimeSpan" Format="hh\:mm" ReadOnly="true" />
        </div>
        <div>
            <MudTextField @bind-Value="userTaskDescription" RequiredError="Description is required!" Placeholder="User Task" Disabled="true" style="margin-top: 0px; width: 200px;" T="string" />
        </div>
    </MudForm>

}

@code {
    [Inject]
    private UserTaskService userTaskService { get; set; }

    private TimeSpan userTaskTime { get; set; }
    private string userTaskDescription { get; set; } = string.Empty;


    private UserTask activeUserTask { get; set; }

    private MudForm form;
    private bool isValid;

    private Timer timer;
    private TimeSpan reloadDelay = TimeSpan.FromMinutes(1);

    protected override async Task OnInitializedAsync()
    {        
        this.ReloadActiveTask();

        this.timer = new Timer(this.reloadDelay);
        timer.Enabled = true;
        timer.AutoReset = true;
        timer.Elapsed += (sender, e) => ReloadActiveTask();
    }

    private void ReloadActiveTask()
    {
        this.activeUserTask = this.userTaskService.GetActiveTask();
        if (this.activeUserTask != null)
        {
            this.userTaskTime = this.activeUserTask.GetDuration();
            this.userTaskDescription = this.activeUserTask.Description;

            this.InvokeAsync(StateHasChanged);
        }
    }

    private void StartUserTask()
    {
        this.activeUserTask = this.userTaskService.StartTask(DateTime.Now, this.userTaskDescription);
    }

    private void EndUserTask()
    {
        this.userTaskService.EndTask(this.activeUserTask.Guid, DateTime.Now);
        this.activeUserTask = null;
        this.userTaskTime = TimeSpan.Zero;
        this.userTaskDescription = string.Empty;
    }
    
    public void Dispose()
    {
        timer?.Dispose();
    }
}