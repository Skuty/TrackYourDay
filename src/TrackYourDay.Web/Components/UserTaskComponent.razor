@using TrackYourDay.Core.UserTasks
@using TrackYourDay.MAUI.MauiPages
@using System.Timers
@implements IDisposable

<div style="display:inline-block">
@if (this.activeUserTask is null)
{
    @switch (this.Mode) 
    {
        case ViewMode.Compact:
            <MudPaper Elevation="3">
                <MudForm @ref="form" @bind-IsValid="@isValid" Class="d-flex align-items-center">
                    <MudIconButton Icon="@Icons.Material.Filled.Task" Color="Color.Default" />
                    <MudTextField Class="flex-grow-1" @bind-Value="newUserTaskDescription" Label="Description" Required="true" RequiredError="Description is required!" />
                    <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.PlayCircle" Disabled="@(!this.isValid)" OnClick="StartUserTask" />
                </MudForm>
            </MudPaper>
            break;

        default:
            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Start User Task</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Task" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTimePicker Label="Start time" @bind-Time="newUserTaskStartTime" />
                        <MudTextField @bind-Value="newUserTaskDescription" Label="Description" Required="true" RequiredError="Description is required!" />
                        <MudCheckBox Checked="true" Label="Show popup" ReadOnly="true" Color="Color.Primary"></MudCheckBox>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.PlayCircle" Disabled="@(!this.isValid)" OnClick="StartUserTask">
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudForm>
            break;
    }
}
else
{
    @switch (this.Mode)
    {
        case ViewMode.Compact:
            <MudPaper Elevation="3">
                <MudForm @ref="form" @bind-IsValid="@isValid" Class="d-flex align-items-center">
                    <!-- Wrapper for Refresh Button and Progress Circular -->
                    <div class="d-flex flex-column align-items-center me-2">
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            <img src="Images/refresh-button.png" alt="Refresh" style="cursor: pointer" width="25px" height="25px" @onclick="ReloadActiveTask" />
                        </div>

                    <!-- Other form elements -->
                    <MudTextField Style="width: 60px;" @bind-Value="this.activeUserTaskDuration" Label="Duration" ReadOnly="true" />
                    <MudTextField Style="width: 170px;" @bind-Value="this.activeUserTaskDescription" Label="Description" ReadOnly="true" />
                    <MudButton Color="Color.Secondary" StartIcon="@Icons.Material.Filled.StopCircle" OnClick="EndUserTask" />
                </MudForm>
            </MudPaper>
            break;

        default:
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Active User Task</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField @bind-Value="this.activeUserTaskStartTime" Label="Start time" ReadOnly="true" />
                    <MudTextField @bind-Value="this.activeUserTaskDuration" Label="Duratoin" ReadOnly="true" />
                    <MudTextField @bind-Value="this.activeUserTaskDescription" Label="Description" ReadOnly="true" />
                    <MudCheckBox Checked="true" ReadOnly="true"></MudCheckBox>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.StopCircle" OnClick="EndUserTask">
                    </MudButton>
                </MudCardActions>
            </MudCard>
            break;
    }
}
</div>

@code {
    [Inject]
    private UserTaskService userTaskService { get; set; }

    [Parameter]
    public EventCallback OnUserTaskEnded { get; set; }

    [Parameter]
    public ViewMode Mode { get; set; } = ViewMode.Normal;

    private UserTask activeUserTask { get; set; }

    private string activeUserTaskStartTime { get; set; }
    private string activeUserTaskDuration { get; set; }
    private string activeUserTaskDescription { get; set; }

    private TimeSpan? newUserTaskStartTime { get; set; } = TimeSpan.FromMinutes((DateTime.Now.Hour * 60) + DateTime.Now.Minute);
    private string newUserTaskDescription { get; set; }

    private bool shouldShowPopup { get; set; } = true;

    private MudForm form;
    private bool isValid;

    private Timer timer;
    private TimeSpan reloadDelay = TimeSpan.FromMinutes(1);

    protected override async Task OnInitializedAsync()
    {        
        this.shouldShowPopup = this.Mode == ViewMode.Normal;

        this.ReloadActiveTask();

        this.timer = new Timer(this.reloadDelay);
        timer.Enabled = true;
        timer.AutoReset = true;
        timer.Elapsed += (sender, e) => ReloadActiveTask();
    }

    private void ReloadActiveTask()
    {
        this.activeUserTask = this.userTaskService.GetActiveTask();
        if (this.activeUserTask != null)
        {
            this.activeUserTaskStartTime = this.activeUserTask.StartDate.ToString();
            var duration = this.activeUserTask.GetDuration();
            this.activeUserTaskDuration = $"{(int)duration.TotalHours}:{duration.Minutes:00}";
            this.activeUserTaskDescription = this.activeUserTask.Description;

            this.InvokeAsync(StateHasChanged);
        }
    }

    private void StartUserTask()
    {
        DateTime startTime;
        if (this.Mode == ViewMode.Compact)
        {
            startTime = DateTime.Now;
        } 
        else
        {
            startTime = DateTime.Today.AddMinutes(this.newUserTaskStartTime.Value.TotalMinutes);
        }

        this.activeUserTask = this.userTaskService.StartTask(startTime, this.newUserTaskDescription);
        this.newUserTaskStartTime = null;
        this.newUserTaskDescription = string.Empty;
        this.activeUserTaskStartTime = this.activeUserTask.StartDate.ToString();
        var duration = this.activeUserTask.GetDuration();
        this.activeUserTaskDuration = $"{(int)duration.TotalHours}:{duration.Minutes:00}";
        this.activeUserTaskDescription = this.activeUserTask.Description    ;

        if (this.shouldShowPopup)
        {
            MauiPageFactory.OpenWebPageInNewWindow("/CompactUserTask");
        }
    }

    private void EndUserTask()
    {
        this.userTaskService.EndTask(this.activeUserTask.Guid, DateTime.Now);
        this.activeUserTask = null;
        this.activeUserTaskStartTime = null;
        this.activeUserTaskDuration = string.Empty;
        this.activeUserTaskDescription = string.Empty;
        this.newUserTaskStartTime = TimeSpan.FromMinutes((DateTime.Now.Hour * 60) + DateTime.Now.Minute);
        this.newUserTaskDescription = string.Empty;

        this.OnUserTaskEnded.InvokeAsync();
    }
    
    public void Dispose()
    {
        timer?.Dispose();
    }
}