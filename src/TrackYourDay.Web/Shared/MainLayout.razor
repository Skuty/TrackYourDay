@using TrackYourDay.Core.Versioning;
@inherits LayoutComponentBase

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="page">
    <div class="sidebar" style="@IconMenuCssClass">
        <CollapsableNavMenu ShowIconMenu="ToggleIconMenu"/>
    </div>


    <main>
        <div class="top-row px-4">
            @if(this.isNewVersionAvailable)
            {
                <div class="alert alert-success" role="alert">
                    You are currently using version @this.currentVersion (@this.currentChannelDisplay), but version <a href="https://github.com/Skuty/TrackYourDay/releases/" target="_blank">@this.newVersion</a> is available.
                    <b><a @onclick="UpdateApplication" style="cursor:pointer">Click here to update!</a></b>
                    <span> | Whats new: @this.whatsNewInNewestRelease</span>
                </div>
            } else
            {
                <div class="alert">
                    <span>You are using the latest version @this.currentVersion (@this.currentChannelDisplay)!</span>
                    <span style="margin-left: 10px;">
                        Update Channel:
                        <select @onchange="OnChannelChanged" value="@this.currentChannel">
                            <option value="Stable">Stable</option>
                            <option value="Prerelease">Prerelease</option>
                        </select>
                    </span>
                    <span style="margin-left: 10px;">
                        <a @onclick="ForceCheckForUpdates" style="cursor:pointer">Check for updates</a>
                    </span>
                </div>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool _iconMenuActive { get; set; } = true;
    private string? IconMenuCssClass => _iconMenuActive ? "width: 80px;" : null;

    protected void ToggleIconMenu(bool iconMenuActive)
    {
        _iconMenuActive = iconMenuActive;
    }

    [Inject]
    private VersioningSystemFacade versioningSystemFacade { get; set; }

    bool isNewVersionAvailable;
    string currentVersion;
    string newVersion;
    string whatsNewInNewestRelease;
    string currentChannel;
    string currentChannelDisplay;

    protected override void OnInitialized()
    {
        CheckForUpdates();
    }

    private void CheckForUpdates()
    {
        this.currentVersion = this.versioningSystemFacade.GetCurrentApplicationVersion().ToString();
        this.currentChannel = this.versioningSystemFacade.GetCurrentChannel().ToString();
        this.currentChannelDisplay = this.currentChannel;

        if (this.versioningSystemFacade.IsNewerVersionAvailable())
        {
            this.isNewVersionAvailable = true;
            this.newVersion = this.versioningSystemFacade.GetNewestAvailableApplicationVersion().ToString();
            this.whatsNewInNewestRelease = this.versioningSystemFacade.GetWhatsNewForNewestAvailableApplicationVersion();
        }
        else
        {
            this.isNewVersionAvailable = false;
        }
    }

    [Inject] private IDialogService DialogService { get; set; }

    private async void UpdateApplication()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Updating Application",
            "Do You really want to Close and Update Application?",
            yesText: "Update!", cancelText: "Cancel");
        string state = result == null ? "Canceled" : "Update!";

        if (state == "Update!")
        {
            this.versioningSystemFacade.UpdateApplication();
        }
    }

    private void OnChannelChanged(ChangeEventArgs e)
    {
        var selectedChannel = e.Value?.ToString();
        if (Enum.TryParse<UpdateChannel>(selectedChannel, out var channel))
        {
            this.versioningSystemFacade.SetChannel(channel);
            this.versioningSystemFacade.ForceRefreshVersionCheck();
            CheckForUpdates();
            StateHasChanged();
        }
    }

    private void ForceCheckForUpdates()
    {
        this.versioningSystemFacade.ForceRefreshVersionCheck();
        CheckForUpdates();
        StateHasChanged();
    }

}