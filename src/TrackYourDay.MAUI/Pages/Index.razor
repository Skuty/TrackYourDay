@page "/"

@using System.Windows;
@using TrackYourDay.Core.Activities;
@using TrackYourDay.Core.Breaks;

<h1><img src="Images/refresh-button.png" alt="Refresh" style="cursor: pointer" width="35px" height="35px" @onclick="Refresh" /> Track Your Day</h1>

<div>
    <div>
        <h2>Activities</h2>
        <p>All activities: @activitiesCount</p>
        <p>All activities duration: @activitiesDuration.Hours h @activitiesDuration.Minutes m @activitiesDuration.Seconds s</p>
        <p>Current activity: @currentActivity?.ActivityType.ActivityDescription</p>
        <p>Last activity: @lastActivity?.ActivityType.ActivityDescription</p>
        <p>Last activity ended at: @lastActivity?.EndDate</p>
        <p>System locked activities: @systemLockedActivitiesCount</p>
        <p>System locked activities duration: @systemLockedActivitiesDuration.Hours h @systemLockedActivitiesDuration.Minutes m @systemLockedActivitiesDuration.Seconds s</p>
    </div>
    <div>
        <h2>Breaks</h2>
        <p>All breaks: @breaksCount</p>
        <p>All breaks duration: @allBreaksDuration.Hours h @allBreaksDuration.Minutes m @allBreaksDuration.Seconds s</p>
        <p>Last break: @lastEndedBreak?.BreakDescription</p>
        <p>Last break started at: @lastEndedBreak?.BreakStartedAt</p>
        <p>Last break ended at: @lastEndedBreak?.BreakEndedAt</p>
    </div>
</div>
@code {
    [Inject]
    private ActivityTracker activityTracker { get; set; }
    [Inject]
    private BreakTracker breakTracker { get; set; }

    private StartedActivity? currentActivity;
    private EndedActivity? lastActivity;
    private int activitiesCount;
    private TimeSpan activitiesDuration;

    private int systemLockedActivitiesCount;
    private TimeSpan systemLockedActivitiesDuration;

    private EndedBreak? lastEndedBreak;
    private int breaksCount;
    private TimeSpan allBreaksDuration;

    private void Refresh()
    {
        this.activitiesCount = this.activityTracker.GetEndedActivities().Count;
        this.activitiesDuration = this.activityTracker.GetEndedActivities().Any() ? this.activityTracker.GetEndedActivities().Select(x => x.GetDuration()).Aggregate((x, y) => x.Add(y))  : TimeSpan.Zero;
        this.lastActivity = this.activityTracker.GetEndedActivities().LastOrDefault();
        this.currentActivity = this.activityTracker.GetCurrentActivity();

        var systemLockedActivities = this.activityTracker.GetEndedActivities().Where(x => x.ActivityType is SystemLockedActivityType);

        if (systemLockedActivities.Any())
        {
            this.systemLockedActivitiesCount = systemLockedActivities.Count();
            this.systemLockedActivitiesDuration = systemLockedActivities.Select(x => x.GetDuration()).Aggregate((x, y) => x.Add(y));
        }
        this.breaksCount = this.breakTracker.GetEndedBreaks().Count;
        if (breakTracker.GetEndedBreaks().Count > 0)
        {
            this.allBreaksDuration = breakTracker.GetEndedBreaks().Select(x => x.BreakDuration).Aggregate((x, y) => x.Add(y));
        }
        this.lastEndedBreak = this.breakTracker.GetEndedBreaks().LastOrDefault();
    }
}