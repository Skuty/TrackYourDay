@using TrackYourDay.Core.UserTasks
@using TrackYourDay.MAUI.MauiPages
<div style="display:inline-block">


@if (this.activeUserTask is null)
{
    <MudForm @ref="form" @bind-IsValid="@isValid">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Start User Task</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Task" Color="Color.Default" />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudTimePicker Label="Start time" @bind-Time="newUserTaskStartTime" />
                <MudTextField @bind-Value="newUserTaskDescription" Label="Description" in Required="true" RequiredError="Description is required!" />
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PlayCircle" Disabled="@(!this.isValid)" OnClick="StartUserTask">
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudForm>
}
else
{
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Active User Task</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="this.activeUserTaskStartTime" Label="Start time" ReadOnly="true" />
            <MudTextField @bind-Value="this.activeUserTaskDuration" Label="Duratoin" ReadOnly="true" />
            <MudTextField @bind-Value="this.activeUserTaskDescription" Label="Description" ReadOnly="true" />
        </MudCardContent>
        <MudCardActions>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.StopCircle" OnClick="EndUserTask">
            </MudButton>
        </MudCardActions>
    </MudCard>
}
</div>

@code {
    [Inject]
    private UserTaskService userTaskService { get; set; }

    [Parameter]
    public EventCallback OnUserTaskEnded { get; set; }

    private UserTask activeUserTask { get; set; }

    private string activeUserTaskStartTime { get; set; }
    private string activeUserTaskDuration { get; set; }
    private string activeUserTaskDescription { get; set; }

    private TimeSpan? newUserTaskStartTime { get; set; } = TimeSpan.FromMinutes((DateTime.Now.Hour * 60) + DateTime.Now.Minute);
    private string newUserTaskDescription { get; set; }

    private MudForm form;
    private bool isValid;

    protected override async Task OnInitializedAsync()
    {
        this.activeUserTask = this.userTaskService.GetActiveTask();
        if (this.activeUserTask != null)
        {
            this.activeUserTaskStartTime = this.activeUserTask.StartDate.ToString();
            this.activeUserTaskDuration = this.activeUserTask.GetDuration().ToString();
            this.activeUserTaskDescription = this.activeUserTask.Description;
        }
    }

    private void StartUserTask()
    {
        this.activeUserTask = this.userTaskService.StartTask(DateTime.Today.AddMinutes(this.newUserTaskStartTime.Value.TotalMinutes), this.newUserTaskDescription);
        this.newUserTaskStartTime = null;
        this.newUserTaskDescription = string.Empty;
        this.activeUserTaskStartTime = this.activeUserTask.StartDate.ToString();
        this.activeUserTaskDuration = this.activeUserTask.GetDuration().ToString();
        this.activeUserTaskDescription = this.activeUserTask.Description;

        MauiPageFactory.OpenWebPageInNewWindow("/popupUserTask");

    }

    private void EndUserTask()
    {
        this.userTaskService.EndTask(this.activeUserTask.Guid, DateTime.Now);
        this.activeUserTask = null;
        this.activeUserTaskStartTime = null;
        this.activeUserTaskDuration = string.Empty;
        this.activeUserTaskDescription = string.Empty;
        this.newUserTaskStartTime = TimeSpan.FromMinutes((DateTime.Now.Hour * 60) + DateTime.Now.Minute);
        this.newUserTaskDescription = string.Empty;

        this.OnUserTaskEnded.InvokeAsync();
    }
}
