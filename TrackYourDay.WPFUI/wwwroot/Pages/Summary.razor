@    using Hangfire;
@    using System.Windows;
@    using TrackYourDay.Core.Activities;
@    using TrackYourDay.Core.Breaks;
    using TrackYourDay.Core.Old.Breaks;
    using TrackYourDay.Core.Old.Activities;

<h1><img src="Images/refresh-button.png" alt="Refresh" style="cursor: pointer" width="35px" height="35px" @onclick="Refresh" /> Track Your Day</h1>
<div>
    <h2>Activities</h2>
    <p>All activities: @activitiesCount</p>
    <p>Last activity at @lastActivity?.EventDate - @lastActivity?.Activity.ToString()</p>
</div>
<div>
    <h2>Breaks</h2>
    <p>All breaks: @breaksCount with duration @allBreaksDuration.Hours h @allBreaksDuration.Minutes m @allBreaksDuration.Seconds s</p>
    <p>Last ended break at @lastEndedBreak?.BreakStartedOn with duration @lastEndedBreak?.BreakDuration.Hours h @lastEndedBreak?.BreakDuration.Minutes m  @lastEndedBreak?.BreakDuration.Seconds s</p>
</div>

@code {
    [Inject]
    private ActivityEventTracker activityEventTracker { get; set; }
    [Inject]
    private BreakTracker breakTracker { get; set; }

    private ActivityEvent lastActivity;
    private int activitiesCount;

    private EndedBreak lastEndedBreak;
    private int breaksCount;
    private TimeSpan allBreaksDuration;

    private void Refresh()
    {
        this.activitiesCount = activityEventTracker.GetRegisteredActivities().Count;
        this.lastActivity = activityEventTracker.GetRegisteredActivities().Last();

        this.breaksCount = breakTracker.endedBreaks.Count;
        if (breakTracker.endedBreaks.Count > 0)
        {
            this.allBreaksDuration = breakTracker.endedBreaks.Select(x => x.BreakDuration).Aggregate((x, y) => x.Add(y));
        }
        this.lastEndedBreak = this.breakTracker.endedBreaks.Last();
    }
}