@using Hangfire;
@using System.Windows;
@using TrackYourDay.Core.Activities;

<h1><img src="Images/refresh-button.png" alt="Refresh" style="cursor: pointer" width="35px" height="35px" @onclick="Refresh" /> Track Your Day</h1>
<div>
    <h2>Activities</h2>
    <p>All activities: @activitiesCount</p>
    <p>All activities duration: @activitiesDuration.Hours h @activitiesDuration.Minutes m @activitiesDuration.Seconds s</p>
    <p>Last activity: @lastActivity?.ActivityType.ActivityDescription</p>
    <p>Last activity ended at: @lastActivity?.EndDate</p>

</div>
<div>
    <h2>Breaks</h2>
    <p>System locked activities: @systemLockedActivitiesCount</p>
    <p>System locked activities duration: @systemLockedActivitiesDuration.Hours h @systemLockedActivitiesDuration.Minutes m @systemLockedActivitiesDuration.Seconds s</p>
</div>

@code {
    [Inject]
    private ActivityTracker activityTracker { get; set; }
    //[Inject]
    //private BreakTracker breakTracker { get; set; }

    private EndedActivity? lastActivity;
    private int activitiesCount;
    private TimeSpan activitiesDuration;

    private int systemLockedActivitiesCount;
    private TimeSpan systemLockedActivitiesDuration;

    //private EndedBreak lastEndedBreak;
    private int breaksCount;
    private TimeSpan allBreaksDuration;

    private void Refresh()
    {
        this.activitiesCount = this.activityTracker.GetEndedActivities().Count;
        this.activitiesDuration = this.activityTracker.GetEndedActivities().Select(x => x.GetDuration()).Aggregate((x, y) => x.Add(y));
        this.lastActivity = this.activityTracker.GetEndedActivities().LastOrDefault();

        var systemLockedActivities = this.activityTracker.GetEndedActivities().Where(x => x.ActivityType is SystemLockedActivityType);

        if (systemLockedActivities.Any())
        {
            this.systemLockedActivitiesCount = systemLockedActivities.Count();
            this.systemLockedActivitiesDuration = systemLockedActivities.Select(x => x.GetDuration()).Aggregate((x, y) => x.Add(y));
        }
        //this.breaksCount = breakTracker.endedBreaks.Count;
        //if (breakTracker.endedBreaks.Count > 0)
        {
            //this.allBreaksDuration = breakTracker.endedBreaks.Select(x => x.BreakDuration).Aggregate((x, y) => x.Add(y));
        }
        //this.lastEndedBreak = this.breakTracker.endedBreaks.Last();
    }
}